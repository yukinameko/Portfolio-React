{"version":3,"sources":["data/image/icon/nameko.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","internTitle","require","internData","skillTitle","skillData","CreateTable","props","react_default","a","createElement","title","map","v","data","d","split","App","className","id","href","src","nameko","alt","App_CreateTable","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,w1FCKlCC,SAAcC,EAAQ,KACtBC,EAAaD,EAAQ,IACrBE,EAAaF,EAAQ,IACrBG,EAAYH,EAAQ,IAEpBI,EAAc,SAACC,GACnB,OACEC,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACGH,EAAMI,MAAMC,IAAI,SAAAC,GAAC,OAAKL,EAAAC,EAAAC,cAAA,UAAKG,MAG5BN,EAAMO,KAAKF,IAAI,SAAAG,GAAC,OAAKP,EAAAC,EAAAC,cAAA,UAClBH,EAAMI,MAAMC,IAAI,SAAAC,GACf,OAAOL,EAAAC,EAAAC,cAAA,UAAKK,EAAEF,GAAGG,MAAM,MAAMJ,IAAI,SAAAC,GAAC,OAAKL,EAAAC,EAAAC,cAAA,YAAOG,EAAEL,EAAAC,EAAAC,cAAA,sBAsD7CO,mLA5CX,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,MAAIS,GAAG,OACLX,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGU,KAAK,UAAR,YACJZ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGU,KAAK,YAAR,YACJZ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGU,KAAK,UAAR,UACJZ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGU,KAAK,QAAR,cAENZ,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cAChBV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,uBACbV,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAQJ,UAAU,WAAWK,IAAI,UAE7Cf,EAAAC,EAAAC,cAAA,MAAIS,GAAG,SAAP,WACAX,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,YACZV,EAAAC,EAAAC,cAAA,kBADF,IACgBF,EAAAC,EAAAC,cAAA,kFACdF,EAAAC,EAAAC,cAAA,sBAFF,IAEoBF,EAAAC,EAAAC,cAAA,uBAClBF,EAAAC,EAAAC,cAAA,kBAHF,IAGgBF,EAAAC,EAAAC,cAAA,gCACdF,EAAAC,EAAAC,cAAA,oBAJF,IAIkBF,EAAAC,EAAAC,cAAA,oKAGlBF,EAAAC,EAAAC,cAAA,MAAIS,GAAG,WAAP,WACEX,EAAAC,EAAAC,cAAA,uBACEF,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,YACZV,EAAAC,EAAAC,cAAA,2BADF,IACyBF,EAAAC,EAAAC,cAAA,qHACvBF,EAAAC,EAAAC,cAAA,qBAFF,IAEmBF,EAAAC,EAAAC,cAAA,+FAErBF,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAACc,EAAD,CAAab,MAAOV,EAAaa,KAAMX,IACzCK,EAAAC,EAAAC,cAAA,mBACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gIAAwBF,EAAAC,EAAAC,cAAA,WAAxB,gEACAF,EAAAC,EAAAC,cAAA,mHAA+BF,EAAAC,EAAAC,cAAA,WAA/B,uHAGNF,EAAAC,EAAAC,cAAA,MAAIS,GAAG,SAAP,SA1BF,gCA4BIX,EAAAC,EAAAC,cAACc,EAAD,CAAab,MAAOP,EAAYU,KAAMT,aAtChCoB,aCfEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9c090ae0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nameko.effccc7e.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport nameko from './data/image/icon/nameko.png';\nimport './App.css';\n\nconst internTitle = require('./data/intern/title.json');\nconst internData = require('./data/intern/data.json');\nconst skillTitle = require('./data/skill/title.json');\nconst skillData = require('./data/skill/data.json');\n\nconst CreateTable = (props) => {\n  return (\n    <table >\n      <tr>\n        {props.title.map(v => (<th>{v}</th>))}\n      </tr>\n      {\n        props.data.map(d => (<tr>\n          {props.title.map(v => {\n            return <td>{d[v].split('\\n').map(v => (<span>{v}<br/></span>))}</td>\n          })}\n          </tr>))\n      }\n    </table>\n    );\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ul id=\"nav\">\n          <li><a href=\"#intro\">Profile</a></li>\n          <li><a href=\"#history\">History</a></li>\n          <li><a href=\"#skill\">Skill</a></li>\n          <li><a href=\"#del\">Products</a></li>\n        </ul>\n        <header className=\"App-header\">\n          <div className=\"Background-App-logo\">\n            <img src={nameko} className=\"App-logo\" alt=\"logo\" />\n          </div>\n          <h1 id=\"intro\">Profile</h1>\n          <dl className=\"contents\">\n            <dt>Name</dt> <dd>大門 由樹 Daimon Yoshiki / なめこ Nameko</dd>\n            <dt>Birthday</dt> <dd>1998/1/16</dd>\n            <dt>From</dt> <dd>富山県</dd>\n            <dt>Belong</dt> <dd>筑波大学 情報学群 情報科学類 4年 知能情報メディア専攻</dd>\n          </dl>\n\n          <h1 id=\"history\">History</h1>\n            <h2>Education</h2>\n              <dl className=\"contents\">\n                <dt>2013/4~2018/3</dt> <dd>石川工業高等専門学校 電子情報工学科</dd>\n                <dt>2018/4~</dt> <dd>筑波大学 情報学群 情報科学類</dd>\n              </dl>\n            <h2>Internship</h2>\n              <CreateTable title={internTitle} data={internData}/>\n            <h2>Award</h2>\n              <ul>\n                <li>第3回学生スマートフォンアプリコンテスト<br/>プレゼンテーション賞</li>\n                <li>e-ZUKA スマートフォンアプリコンテスト 2018<br/>ヌーラボ賞・福岡県済生会飯塚嘉穂病院賞</li>\n              </ul>\n\n          <h1 id=\"skill\">Skill</h1>\n            2019年4月現在\n            <CreateTable title={skillTitle} data={skillData}/>\n            \n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}